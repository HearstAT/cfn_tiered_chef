{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Cloudformation Chef Backend Server v1.0",
  "Parameters": {
    "InstanceType": {
      "Type": "String",
      "Default": ""
    },
    "ImageId": {
      "Type": "String",
      "Default": ""
    },
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type" : "String"
    },
    "SSHSecurityGroup" : {
      "Description" : "Select Security Group for SSH Access",
      "Type": "String",
      "Default": ""
    },
    "VPC": {
      "Description" : "Choose VPC to use",
      "Type" : "String",
      "Default": ""
    },
    "BackendSSL": {
      "Description" : "Enable SSL",
      "Type" : "String",
      "Default": ""
    },
    "Subnet": {
      "Description" : "Choose Subnet",
      "Type" : "String",
      "Default": ""
    },
    "SignupDisable": {
      "Description" : "Choose Subnet",
      "Type" : "String",
      "Default": ""
    },
    "IAMRole": {
      "Description" : "Enter IAM Role name",
      "Type" : "String",
      "Default": ""
    },
    "IAMProfile": {
      "Description" : "Enter IAM Role name",
      "Type" : "String",
      "Default": ""
    },
    "AccessKey": {
      "Description" : "Enter User Access Key",
      "Type" : "String",
      "Default": ""
    },
    "SecretKey": {
      "Description" : "Enter User Secret Key",
      "Type" : "String",
      "Default": ""
    },
    "ENI": {
      "Description" : "Choose ENI to use",
      "Type" : "String",
      "Default": ""
    },
    "IP": {
      "Description" : "Enter IP",
      "Type" : "String",
      "Default": ""
    },
    "FE01IP": {
      "Description" : "Enter Frontend01 IP",
      "Type" : "String",
      "Default": ""
    },
    "FE02IP": {
      "Description" : "Enter Frontend02 IP",
      "Type" : "String",
      "Default": ""
    },
    "HostedZone": {
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "must match a route53 hosted domain/zone"
    },
    "SecondaryDomain": {
      "Type": "String",
      "Default": "domain.com",
      "Description": "If including a 2nd manual/non-aws domain (optional)"
    },
    "HostedSubdomain": {
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "subdomain/prefix for chose hosted zone"
    },
    "ChefDir": {
      "Type": "String",
      "Default": "",
      "Description": "Enter dir location"
    },
    "Bucket": {
      "Type": "String",
      "Default": "",
      "Description": "Enter S3 bucket name for chef backups & primary backened generated items"
    },
    "SupportEmail": {
      "Type": "String",
      "Default": "",
      "Description": "Enter Support Email for Chef Server (Optional)"
    },
    "MailHost": {
      "Type": "String",
      "Default": "",
      "Description": "Enter Mail Host (Optional)"
    },
    "MailPort": {
      "Type": "String",
      "Default": "",
      "Description": "Enter Port for Mail Host (Optional)"
    },
    "LicenseCount": {
      "Type": "String",
      "Default": "",
      "Description": "Enter how many licenses you have purchased"
    },
    "ExternalDB": {
        "Type": "String",
        "Default": "",
        "Description": "Choose between an external or internal DB configuration"
    },
    "DBUser": {
        "Type": "String",
        "Default": "",
        "Description": "(External Only) Enter DB User Name"
    },
    "DBPassword": {
        "Type": "String",
        "NoEcho": "true",
        "Default": "",
        "Description": "(External Only) Enter DB Password"
    },
    "DBPort": {
        "Type": "String",
        "Default": "",
        "Description": "(External Only) Enter DB Port"
    },
    "DBURL": {
        "Type": "String",
        "Default": "",
        "Description": "(External Only) Enter DB URL or VIP"
    },
    "ExternalCookbooks": {
        "Type": "String",
        "Default": "",
        "Description": "Choose between an external or internal Cookbook storage configuration"
    },
    "CookbookBucket": {
        "Type": "String",
        "Default": "",
        "Description": "(External Only) Enter S3 Bucket Name for Cookbook Storage"
    },
    "ExistingInstall": {
        "Type": "String",
        "Default": "",
        "Description": "Only if using previous Chef-Bucket and External DB"
    },
    "MailCreds": {
        "Type": "String",
        "NoEcho": "true",
        "Default": "",
        "Description": "Enter Mail Credentials (e.g.; $username:$password)"
    },
    "NewRelicEnable": {
        "Type": "String",
        "Default": "",
        "Description": "Choose to enable/disable New Relic"
    },
    "SumologicEnable": {
        "Type": "String",
        "Default": "",
        "Description": "Choose to enable/disable Sumologic"
    },
    "NewRelicLicense": {
        "Type": "String",
        "NoEcho": "true",
        "Default": "",
        "Description": "Enter New Relic License Key"
    },
    "NewRelicAppName": {
        "Type": "String",
        "Default": "",
        "Description": "Enter New Relic Application Name"
    },
    "SumologicAccessID": {
        "Type": "String",
        "NoEcho": "true",
        "Default": "",
        "Description": "Enter Sumologic Access ID"
    },
    "SumologicAccessKey": {
        "Type": "String",
        "NoEcho": "true",
        "Default": "",
        "Description": "Enter Sumologic Access Key"
    },
    "SumologicPassword": {
        "Type": "String",
        "NoEcho": "true",
        "Default": "",
        "Description": "Enter Sumologic Password"
    },
    "S3Dir": {
        "Type": "String",
        "Default": "",
        "Description": "Path to mount S3 Bucket to (created during CFN run)"
    },
    "Cookbook": {
        "Type": "String",
        "Default": "",
        "Description": "Cookbook Name"
    },
    "CookbookGit": {
        "Type": "String",
        "Default": "",
        "Description": "Git Clone URI for Cookbook"
    },
    "CookbookGitBranch": {
        "Type": "String",
        "Default": "",
        "Description": "Git Clone Branch"
    },
    "UserDataScript": {
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "URL for userdata script"
    },
    "BackupEnable": {
      "Type": "String",
      "Default": "",
      "Description": "Select True/False if you wanted to enable backups"
    }
},
"Resources": {
    "BackendEIP": {
        "Type": "AWS::EC2::EIP",
        "Properties": {
            "InstanceId": {
                "Ref": "BackendEC2Instance"
            },
        "Domain": "vpc"
        }
    },
    "DNS" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName": { "Fn::Join" : [ "",[ { "Ref" : "HostedZone" } ,"." ] ] },
        "Comment" : "DNS name for my instance.",
        "Name" : { "Fn::Join" : [ "", [ "chef-backend", ".", "int", ".", { "Ref" : "HostedZone" } ,"." ] ] },
        "Type" : "A",
        "TTL" : "60",
        "ResourceRecords" : [ { "Ref" : "IP" } ]
      }
    },
    "VIPDNS" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName": { "Fn::Join" : [ "",[ { "Ref" : "HostedZone" } ,"." ] ] },
        "Comment" : "DNS name for Chef VIP",
        "Name" : { "Fn::Join" : [ "", [ "chef-vip", ".", { "Ref" : "HostedZone" } ,"." ] ] },
        "Type" : "A",
        "TTL" : "60",
        "ResourceRecords" : [ { "Ref": "IP" } ]
      }
    },
    "BackendEC2Instance": {
    "Type": "AWS::EC2::Instance",
      "Properties": {
        "IamInstanceProfile": { "Ref": "IAMProfile" },
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "InstanceType": { "Ref": "InstanceType" },
        "ImageId" : { "Ref": "ImageId" },
        "KeyName": { "Ref": "KeyName" },
        "Tags": [ { "Key": "Name", "Value": "Chef-Backend" }],
        "NetworkInterfaces" : [ { "NetworkInterfaceId" : { "Ref" : "ENI" }, "DeviceIndex" : 0 } ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "Iops" : "600",
              "VolumeSize": "20"
            }
          },
          {
            "DeviceName": "/dev/sdb",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "Iops" : "1500",
              "VolumeSize": "50"
            }
          }
        ],
        "UserData": {
          "Fn::Base64" : { "Fn::Join" : ["", [
                "#!/bin/bash -xev\n",
                "apt-get update && apt-get -y upgrade\n",
                "apt-get install -y wget curl python-setuptools python-pip git\n",
                "# Helper function to set wait timer\n",
                "function error_exit\n",
                "{\n",
                "  /usr/local/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
                "  exit 1\n",
                " }\n",
                "export -f error_exit\n",
                "curl -Sl ", { "Ref" : "UserDataScript" }," -o /tmp/userdata.sh\n",
                "chmod +x /tmp/userdata.sh\n",
                "export REGION='", { "Ref" : "AWS::Region" } ,"'\n",
                "set +xv\n",
                "export IAM_ROLE='", { "Ref" : "IAMRole" } ,"'\n",
                "export ACCESS_KEY='", { "Ref" : "AccessKey" } ,"'\n",
                "export SECRET_KEY='", { "Ref" : "SecretKey" } ,"'\n",
                "set -xv\n",
                "export ENI='", { "Ref" : "ENI" } ,"'\n",
                "export VIP_DNS='", { "Fn::Join" : [ "", [ "chef-vip", ".", { "Ref" : "HostedZone" } ] ] } ,"'\n",
                "export DNS='", { "Fn::Join" : [ "", [ "chef-backend", ".", "int", ".", { "Ref" : "HostedZone" } ] ] } ,"'\n",
                "export IP='", { "Ref" : "IP" },"'\n",
                "export VIP='", { "Ref" : "IP" } ,"'\n",
                "export FE01_DNS='", { "Fn::Join" : [ "", [ "chef-fe-01", ".", "int", ".", { "Ref" : "HostedZone" } ] ] } ,"'\n",
                "export FE01_IP='", { "Ref" : "FE01IP" } ,"'\n",
                "export FE02_DNS='", { "Fn::Join" : [ "", [ "chef-fe-02", ".", "int", ".", { "Ref" : "HostedZone" } ] ] } ,"'\n",
                "export FE02_IP='", { "Ref" : "FE02IP" } ,"'\n",
                "export DOMAIN='", { "Ref": "HostedZone" } ,"'\n",
                "export SECONDARY_DOMAIN='", { "Ref": "SecondaryDomain" } ,"'\n",
                "export SUBDOMAIN='", { "Ref": "HostedSubdomain" } ,"'\n",
                "export DB_CHOICE='", { "Ref" : "ExternalDB" } ,"'\n",
                "export DB_USER='", { "Ref" : "DBUser" } ,"'\n",
                "export DB_PASSWORD='", { "Ref" : "DBPassword" } ,"'\n",
                "export DB_PORT='", { "Ref" : "DBPort" } ,"'\n",
                "export DB_URL='", { "Ref" : "DBURL" } ,"'\n",
                "export COOKBOOK_CHOICE='", { "Ref" : "ExternalCookbooks" } ,"'\n",
                "export COOKBOOK_BUCKET='", { "Ref" : "CookbookBucket" } ,"'\n",
                "export BUCKET='", { "Ref" : "Bucket" } ,"'\n",
                "export ENABLE_SSL='", { "Ref" : "BackendSSL" } ,"'\n",
                "export BACKUP_ENABLE='", { "Ref" : "BackupEnable" } ,"'\n",
                "export EXISTING_INSTALL='", { "Ref" : "ExistingInstall" } ,"'\n",
                "export CHEFDIR='", { "Ref" : "ChefDir" } ,"'\n",
                "export COOKBOOK='", { "Ref" : "Cookbook" } ,"'\n",
                "export COOKBOOK_GIT='", { "Ref" : "CookbookGit" } ,"'\n",
                "export COOKBOOK_BRANCH='", { "Ref" : "CookbookGitBranch" } ,"'\n",
                "export S3DIR='", { "Ref" : "S3Dir" } ,"'\n",
                "export SIGNUP_DISABLE='", { "Ref" : "SignupDisable" } ,"'\n",
                "export SUPPORT_EMAIL='", { "Ref" : "SupportEmail" } ,"'\n",
                "set +xv\n",
                "export NR_LICENSE='", { "Ref" : "NewRelicLicense" } ,"'\n",
                "export NR_APPNAME='", { "Ref" : "NewRelicAppName" } ,"'\n",
                "export NR_ENABLE='", { "Ref" : "NewRelicEnable" } ,"'\n",
                "export SUMO_ENABLE='", { "Ref" : "SumologicEnable" } ,"'\n",
                "export SUMO_ACCESS_ID='", { "Ref" : "SumologicAccessID" } ,"'\n",
                "export SUMO_ACCESS_KEY='", { "Ref" : "SumologicAccessKey" } ,"'\n",
                "export SUMO_PASSWORD='", { "Ref" : "SumologicPassword" } ,"'\n",
                "export MAIL_CREDS='", { "Ref" : "MailCreds" } ,"'\n",
                "set -xv\n",
                "export MAIL_HOST='", { "Ref" : "MailHost" } ,"'\n",
                "export MAIL_PORT='", { "Ref" : "MailPort" } ,"'\n",
                "export LICENSE_COUNT='", { "Ref" : "LicenseCount" } ,"'\n",
                "export ROLE='backend'\n",
                "/tmp/userdata.sh\n",
                "# All is well so signal success and let CF know wait function is complete\n",
                "/usr/local/bin/cfn-signal -e 0 -r \"Server setup complete\" '", { "Ref" : "WaitHandle" }, "'\n",
                "rm -f /tmp/userdata.sh"
              ]
            ]
          }
        }
      }
    },
   "WaitHandle" : {
     "Type" : "AWS::CloudFormation::WaitConditionHandle"
   },
   "WaitCondition" : {
     "Type" : "AWS::CloudFormation::WaitCondition",
     "DependsOn" : "BackendEC2Instance",
     "Properties" : {
         "Handle" : { "Ref" : "WaitHandle" },
         "Timeout" : "2300"
       }
    }
  }
}
